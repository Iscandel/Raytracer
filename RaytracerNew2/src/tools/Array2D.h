#ifndef H__GRILLE2D__H
#define H__GRILLE2D__H

#include <vector>
#include <sstream>

template<class T>
class Array2D
{
public:
	///////////////////////////////////////////////////////////////////////////////
	// Constructeur par défaut
	///////////////////////////////////////////////////////////////////////////////
	Array2D(void);

	///////////////////////////////////////////////////////////////////////////////
	// Constructeur surchargé
	// PARAMS -> largeur : le nombre d'éléments en largeur du tableau (colonnes)
	//		  -> hauteur : le nombre d'éléments en hauteur du tableau (lignes)
	///////////////////////////////////////////////////////////////////////////////
	Array2D(unsigned int width, unsigned int height);

	///////////////////////////////////////////////////////////////////////////////
	// Destructeur
	///////////////////////////////////////////////////////////////////////////////
	~Array2D(void) {}

	///////////////////////////////////////////////////////////////////////////////
	// Surcharge de l'opérateur () pour accéder directement aux éléments du tableau
	// RETOUR -> Une référence sur l'élément en (x,y)
	///////////////////////////////////////////////////////////////////////////////
	T& operator() (unsigned int x, unsigned int y);

	///////////////////////////////////////////////////////////////////////////////
	// Surcharge de l'opérateur () pour accéder directement aux éléments du tableau
	///////////////////////////////////////////////////////////////////////////////
    const T&  operator() (unsigned int x, unsigned int y) const;

	///////////////////////////////////////////////////////////////////////////////
	// Constructeur de recopie
	///////////////////////////////////////////////////////////////////////////////
	Array2D(const Array2D& m);         

	///////////////////////////////////////////////////////////////////////////////
	// Opérateur d'assignation
	///////////////////////////////////////////////////////////////////////////////
    Array2D& operator= (const Array2D& m);   

	///////////////////////////////////////////////////////////////////////////////
	// Change la largeur du tableau, et le redimensionne
	///////////////////////////////////////////////////////////////////////////////
	void setWidth(unsigned int width);

	///////////////////////////////////////////////////////////////////////////////
	// Change la hauteur du tableau, et le redimensionne
	///////////////////////////////////////////////////////////////////////////////
	void setHeight(unsigned int height);

	///////////////////////////////////////////////////////////////////////////////
	// Change la taille du tableau, et le redimensionne
	///////////////////////////////////////////////////////////////////////////////
	void setSize(unsigned int width, unsigned int height);

	///////////////////////////////////////////////////////////////////////////////
	// Obtient la largeur du tableau
	///////////////////////////////////////////////////////////////////////////////
	unsigned int getWidth() const {return myWidth;}

	///////////////////////////////////////////////////////////////////////////////
	// Obtient la hauteur du tableau
	///////////////////////////////////////////////////////////////////////////////
	unsigned int getHeight() const {return myHeight;}

protected:
	std::vector<T> myArray;

	unsigned int myWidth;
	unsigned int myHeight;
};

///////////////////////////////////////////////////////////////////////////////
// Constructeur par défaut
///////////////////////////////////////////////////////////////////////////////
template<class T>
Array2D<T>::Array2D()
:myWidth(1)
,myHeight(1)
{
	myArray.resize(1*1);
}

///////////////////////////////////////////////////////////////////////////////
// Constructeur surchargé
// PARAMS -> largeur : le nombre d'éléments en largeur du tableau (colonnes)
//		  -> hauteur : le nombre d'éléments en hauteur du tableau (lignes)
///////////////////////////////////////////////////////////////////////////////
template<class T>
Array2D<T>::Array2D(unsigned int width, unsigned int height)
:myWidth(width)
,myHeight(width)
{
	myArray.resize(width * height);
}

///////////////////////////////////////////////////////////////////////////////
// Surcharge de l'opérateur () pour accéder directement aux éléments du tableau
// RETOUR -> Une référence sur l'élément en (x,y)
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline T& Array2D<T>::operator() (unsigned int x, unsigned int y)
{
#ifdef ARRAY_CHECK_RANGE
    if (x >= myWidth || y >= maHauteur)
		throw IndexHorsLimite("Grille 2D : ", x, y);
#endif

    return myArray[y * myWidth + x];
}
 
///////////////////////////////////////////////////////////////////////////////
// Surcharge de l'opérateur () pour accéder directement aux éléments du tableau
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline const T& Array2D<T>::operator() (unsigned int x, unsigned int y) const
{
#ifdef ARRAY_CHECK_RANGE
     if (x >= myWidth || y >= maHauteur)
       throw IndexHorsLimite("Grille 2D : ", x, y);
#endif

     return myArray[y * myWidth + x];
}

///////////////////////////////////////////////////////////////////////////////
// Change la largeur du tableau, et le redimensionne
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline void Array2D<T>::setWidth(unsigned int width)
{
	myWidth = width;
	myArray.clear();
	myArray.resize(myWidth * myHeight);
}

///////////////////////////////////////////////////////////////////////////////
// Change la hauteur du tableau, et le redimensionne
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline void Array2D<T>::setHeight(unsigned int height)
{
	myHeight = height;
	myArray.clear();
	myArray.resize(myWidth * myHeight);
}

///////////////////////////////////////////////////////////////////////////////
// Change la taille du tableau, et le redimensionne
///////////////////////////////////////////////////////////////////////////////
template<class T>
inline void Array2D<T>::setSize(unsigned int width, unsigned int height)
{
	myWidth = width;
	myHeight = height;
	myArray.clear();
	myArray.resize(myWidth * myHeight);
}

///////////////////////////////////////////////////////////////////////////////
// Opérateur d'assignation
///////////////////////////////////////////////////////////////////////////////
template<class T>
Array2D<T>& Array2D<T>::operator=(const Array2D<T>& _array)
{
	myWidth = _array.myWidth;
    myHeight = _array.myHeight;
	myArray = _array.myArray;

    return *this;
}


///////////////////////////////////////////////////////////////////////////////
// Constructeur de recopie
///////////////////////////////////////////////////////////////////////////////
template<class T>
Array2D<T>::Array2D(const Array2D& _array)
{
	myWidth = _array.myWidth;
    myHeight = _array.myHeight;
	myArray = _array.myArray;
}


#endif