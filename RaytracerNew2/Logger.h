#ifndef H__LOGGER_050920110053__H
#define H__LOGGER_050920110053__H

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <string>
#include <stdarg.h>
#include <fstream>
#include <time.h>
#include <iostream>
#include <sstream>

#include "NonCopyable.h"

#define LOGPOSITION __FILE__ << " (" << __LINE__ << ") : "

///////////////////////////////////////////////////////////////////////////////
// Utility class which logs events. Events can be logged with different levels
// of importance. Inspired from http://
///////////////////////////////////////////////////////////////////////////////
class ILogger : public NonCopyable
{
public :

	///////////////////////////////////////////////////////////////////////////
	/// Importance level of event
	///////////////////////////////////////////////////////////////////////////
	enum LogLevel
	{
		ERRORS,		///< Only errors are logged
		INFORMATIVE,///< Warnings and errors are logged
		ALL			///< All is logged
	};

    virtual ~ILogger();

	///////////////////////////////////////////////////////////////////////////
	/// Sets the current logger, which defines the output format of the logged
	/// data.
	/// 
	/// \param Logger: A pointer to the logger to set. Must be dynamically
	/// allocated. The logger class automatically destroys this pointer.
	///////////////////////////////////////////////////////////////////////////
    static void setLogger(ILogger* Logger);

    ///////////////////////////////////////////////////////////////////////////
	/// Logs a C-like string
	///
	/// \param Format: The string to log. You can give additionnal arguments
	/// to the string, that will be formatted in Format. See printf()function
	/// for examples.
	///////////////////////////////////////////////////////////////////////////
    static void log(const char* Format, ...);

	///////////////////////////////////////////////////////////////////////////
	/// Must be called first when you want to log data. Should be followed by
	/// output stream operators: ILogger::log() << "Hello world!".
	///
	/// \param lvl: Log level of the message. If it is less importance than
	/// the minimum log level defined, the message will not be logged.
	///
	/// \return The logger instance to chain calls
	///////////////////////////////////////////////////////////////////////////
    static ILogger& log(LogLevel n = INFORMATIVE);

	///////////////////////////////////////////////////////////////////////////
	/// Fixes the minimum log level of the logger. To be logged, a message must
	/// have a higher log level.
	///
	/// \param lvl: Threshold to assign.
	///////////////////////////////////////////////////////////////////////////
	static void setLogLevel(LogLevel lvl) {myLogThreshold = lvl;}

	///////////////////////////////////////////////////////////////////////////
	/// Output stream.
	///
	/// \param ToLog: Data to log.
	///////////////////////////////////////////////////////////////////////////
    template <class T> ILogger& operator <<(const T& ToLog);

	///////////////////////////////////////////////////////////////////////////
	/// Gives the current time.
	/// 
	/// \return A string containing the current time. 
	///////////////////////////////////////////////////////////////////////////
	std::string currentTime() const;

	///////////////////////////////////////////////////////////////////////////
	/// Gives the current date.
	/// 
	/// \return A string containing the current date. 
	///////////////////////////////////////////////////////////////////////////
	std::string currentDate() const;

	///////////////////////////////////////////////////////////////////////////
	/// Destroys the current logger.
	///////////////////////////////////////////////////////////////////////////
	static void destroy();

	///////////////////////////////////////////////////////////////////////////
	/// Returns the name of the defined threshold in a formatted string.
	///
	/// \return A string containing the name of the threshold.
	///////////////////////////////////////////////////////////////////////////
	static std::string thresholdToString();

private :
	///////////////////////////////////////////////////////////////////////////
	/// write output data. Must be overrided by derived classes.
	///
	/// \param Message: The message to log.
	///////////////////////////////////////////////////////////////////////////
    virtual void write(const std::string& Message) = 0;

	///////////////////////////////////////////////////////////////////////////
	/// Returns the current instance of the logger.
	///
	/// \return The current instance.
	///////////////////////////////////////////////////////////////////////////
	static ILogger& internalLog();

	static ILogger* myStaticInstance;  ///< Pointer to the current logger instance
	static LogLevel myLogThreshold;    ///< Log threshold
	static LogLevel myCurrentLogLevel; ///< Current log level
};


template <class T> ILogger& ILogger::operator <<(const T& ToLog)
{
	if(myCurrentLogLevel <= myLogThreshold)
	{
		std::ostringstream Stream;
		Stream << ToLog;
		write(Stream.str());
	}

    return internalLog();
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
/// Logs data into a file
///////////////////////////////////////////////////////////////////////////////
class FileLogger : public ILogger
{
public:
	//////////////////////////////////////////////////////////////////////
	/// Constructor
	///
	/// \param name: path to the file
	/// \param add: add to an existing file, or overwrite
	//////////////////////////////////////////////////////////////////////////
	FileLogger(std::string name = "./gaia_out.txt", bool add = true);

	///////////////////////////////////////////////////////////////////////////
	/// Destructor
	///////////////////////////////////////////////////////////////////////////
	virtual ~FileLogger();
private:
	///////////////////////////////////////////////////////////////////////////
	/// @override
	///////////////////////////////////////////////////////////////////////////
	virtual void write(const std::string& Message);
	std::ofstream myFile;
};

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
/// Logs data into an output stream.
///////////////////////////////////////////////////////////////////////////////
class ConsoleLog : public ILogger
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// Constructor
	///
	/// \param o: Reference to the output stream used. Gives std::cout if you
	/// want to write in the console.
	///////////////////////////////////////////////////////////////////////////
	ConsoleLog(std::ostream& c);

private:
	///////////////////////////////////////////////////////////////////////////
	/// @override
	///////////////////////////////////////////////////////////////////////////
	virtual void write(const std::string& Message);
	std::ostream& myStream; ///< Reference to the stream
};


#endif