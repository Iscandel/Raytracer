#pragma once
#include "Geometry.h"

///////////////////////////////////////////////////////////////////////////////
/// \brief Data structure for to handle rays (direction and origin).
///////////////////////////////////////////////////////////////////////////////
class Ray
{	
public:
	EIGEN_MAKE_ALIGNED_OPERATOR_NEW

public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Default constructor
	///////////////////////////////////////////////////////////////////////////
	Ray();

	///////////////////////////////////////////////////////////////////////////
	/// \brief Default constructor
	///////////////////////////////////////////////////////////////////////////
	Ray(const Point3d& origin, const Vector3d& direction);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///////////////////////////////////////////////////////////////////////////
	Ray(const Point3d& origin, const Vector3d& direction, double minT, double maxT);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Destructor
	///////////////////////////////////////////////////////////////////////////
	~Ray(void);

	///////////////////////////////////////////////////////////////////////////
	/// \brief Assigns a new ray direction and update it.
	///////////////////////////////////////////////////////////////////////////
	void direction(const Vector3d& dir)
	{
		myDirection = dir;
		myInvDir = dir.cwiseInverse();
	}

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the ray direction.
	///////////////////////////////////////////////////////////////////////////
	const Vector3d& direction() const { return myDirection; }

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the inverse componenet wise direction
	///////////////////////////////////////////////////////////////////////////
	const Vector3d& invDir() const { return myInvDir; }

	///////////////////////////////////////////////////////////////////////////
	/// \brief Returns the point on the ray at the given distance
	///////////////////////////////////////////////////////////////////////////
	Point3d getPointAt(double distance) const { return myOrigin + distance * myDirection; }

	Point3d myOrigin;
	double myMinT;
	double myMaxT;

protected:
	Vector3d myDirection;	
	Vector3d myInvDir;
};

